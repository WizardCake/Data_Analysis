library(tidyverse)
library(ggplot2)
library(plotly)
df <- readxl::read_excel('preco_combustiveis.xlsx')
df <- readxl::read_excel('inputs\\preco_combustiveis.xlsx')
df <- basedosdados::read_sql(
"WITH sub AS (
SELECT p.produto,
ip.indice AS indice_atual
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
WHERE p.ano >= 2004
GROUP BY 1, 2
)
SELECT p.ano,
EXTRACT(MONTH FROM p.data_coleta) AS mes,
p.produto,
ROUND(AVG(p.preco_venda), 3) AS preco_medio,
ROUND((AVG(sub.indice_atual) / AVG(ip.indice)) * AVG(p.preco_venda), 3) AS preco_corrigido
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
INNER JOIN sub
ON p.produto = sub.produto
WHERE p.ano >= 2004 AND ip.mes IS NOT NULL
GROUP BY 1, 2, 3;
")
View(df)
df %>% writexl::write_xlsx('inputs\\preco_combustivel.xlsx')
View(df)
df
df <- df %>%
dplyr::filter(!is.na(mes)) %>% # Remover valores ausentes
dplyr::mutate(date = as.Date(paste(ano, mes, "01", sep = "-")),
date = format(date, "%Y_%m")) %>% # Formatando a data como 'Ano_Mês'
dplyr::select(date, produto, preco_corrigido) %>% # Selecionando as colunas importantes
dplyr::arrange(produto, date) # Ordenar os dados por ano e mês
df
df <- basedosdados::read_sql(
"WITH sub AS (
SELECT p.produto,
ip.indice AS indice_atual
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
WHERE p.ano >= 2004
GROUP BY 1, 2
)
SELECT p.ano,
EXTRACT(MONTH FROM p.data_coleta) AS mes,
p.produto,
ROUND(AVG(p.preco_venda), 3) AS preco_medio,
ROUND((AVG(sub.indice_atual) / AVG(ip.indice)) * AVG(p.preco_venda), 3) AS preco_corrigido
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
INNER JOIN sub
ON p.produto = sub.produto
WHERE p.ano >= 2004 AND ip.mes IS NOT NULL
GROUP BY 1, 2, 3;
")
df <- readxl::read_excel('inputs\\preco_combustiveis.xlsx')
readxl::read_excel('inputs\\preco_combustiveis.xlsx')
df <- readxl::read_excel('inputs\\preco_combustivel.xlsx')
df <- readxl::read_excel('inputs\preco_combustivel.xlsx')
View(df)
View(df)
ggplot(df) +
aes(x = date, y = preco_corrigido, color = produto, group = produto) + # seleção das variáveis para o gráfico
geom_line() + # estilo do gráfico: linha
labs(
title = "Inflation-Adjusted Fuel Prices in Brazil (2021)",
x = "Date",
y = "Inflation-Adjusted Price",
color = "Fuel Type",
caption = 'Fonte: Base dos Dados / ANP / IBGE'
) + # Declarar o texto dos título, eixos, legendas e fonte
facet_wrap( ~ produto, scales = 'free_y', ncol = 3) +
theme_minimal() + # Utilizar um tema mais limpo
theme(legend.position = 'top') # Posição da legenda
View(df)
df
View(df)
install.packages('kableExtra ')
install.packages('kableExtra')
# Limpeza dos dados e formatação de data
df <- df %>%
# Remover valores ausentes
dplyr::filter(!is.na(mes)) %>%
# Formatando o campo data
dplyr::mutate(date = as.Date(paste(ano, mes, "01", sep = "-"))) %>%
# Selecionando as colunas importantes
dplyr::select(date, produto, preco_corrigido, preco_medio) %>%
# Renomeando para padronizar
dplyr::rename('Data' = date,
'Produto' = produto,
'Corrigido' = preco_corrigido,
'Medio' = preco_medio)
df <- readxl::read_excel('inputs\\preco_combustivel.xlsx')
basedosdados::read_sql(
"WITH sub AS (
SELECT p.produto,
ip.indice AS indice_atual
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
WHERE p.ano >= 2014
GROUP BY 1, 2
)
SELECT p.ano,
EXTRACT(MONTH FROM p.data_coleta) AS mes,
p.produto,
ROUND(AVG(p.preco_venda), 3) AS preco_medio,
ROUND((AVG(sub.indice_atual) / AVG(ip.indice)) * AVG(p.preco_venda), 3) AS preco_corrigido
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
INNER JOIN sub
ON p.produto = sub.produto
WHERE p.ano >= 2004 AND ip.mes IS NOT NULL
GROUP BY 1, 2, 3;
") %>% writexl::write_xlsx('preco_combustivel.xlsx')
knitr::opts_chunk$set(echo = TRUE)
# Definir o ID de faturamento do projeto no Google Cloud
basedosdados::set_billing_id('magia-dos-bolinhos')
# SQL Query para extrair dados do preço dos combustíveis e corrigir pela inflação
df <- basedosdados::read_sql(
"WITH sub AS (
SELECT p.produto,
ip.indice AS indice_atual
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
WHERE p.ano >= 2014
GROUP BY 1, 2
)
# SQL Query para extrair dados do preço dos combustíveis e corrigir pela inflação
df <- basedosdados::read_sql(
"WITH sub AS (
df <- basedosdados::read_sql(
"WITH sub AS (
SELECT p.produto,
ip.indice AS indice_atual
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
WHERE p.ano >= 2014
GROUP BY 1, 2
)
SELECT p.ano,
EXTRACT(MONTH FROM p.data_coleta) AS mes,
p.produto,
ROUND(AVG(p.preco_venda), 3) AS preco_medio,
ROUND((AVG(sub.indice_atual) / AVG(ip.indice)) * AVG(p.preco_venda), 3) AS preco_corrigido
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
INNER JOIN sub
ON p.produto = sub.produto
WHERE p.ano >= 2014 AND ip.mes IS NOT NULL
GROUP BY 1, 2, 3;
")
View(df)
basedosdados::read_sql(
"WITH sub AS (
SELECT p.produto,
ip.indice AS indice_atual
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
WHERE p.ano >= 2014
GROUP BY 1, 2
)
SELECT p.ano,
EXTRACT(MONTH FROM p.data_coleta) AS mes,
p.produto,
ROUND(AVG(p.preco_venda), 3) AS preco_medio,
ROUND((AVG(sub.indice_atual) / AVG(ip.indice)) * AVG(p.preco_venda), 3) AS preco_corrigido
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
INNER JOIN sub
ON p.produto = sub.produto
WHERE p.ano >= 2014 AND ip.mes IS NOT NULL
GROUP BY 1, 2, 3;
") %>% writexl::write_xlsx('inputs\\preco_combustivel.xlsx')
library(basedosdados)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(plotly)
basedosdados::read_sql(
"WITH sub AS (
SELECT p.produto,
ip.indice AS indice_atual
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
WHERE p.ano >= 2014
GROUP BY 1, 2
)
SELECT p.ano,
EXTRACT(MONTH FROM p.data_coleta) AS mes,
p.produto,
ROUND(AVG(p.preco_venda), 3) AS preco_medio,
ROUND((AVG(sub.indice_atual) / AVG(ip.indice)) * AVG(p.preco_venda), 3) AS preco_corrigido
FROM basedosdados.br_anp_precos_combustiveis.microdados p
LEFT JOIN basedosdados.br_ibge_ipca.mes_brasil ip
ON p.ano = ip.ano AND EXTRACT(MONTH FROM p.data_coleta) = ip.mes
INNER JOIN sub
ON p.produto = sub.produto
WHERE p.ano >= 2014 AND ip.mes IS NOT NULL
GROUP BY 1, 2, 3;
") %>% writexl::write_xlsx('inputs\\preco_combustivel.xlsx')
readxl::read_excel('inputs\\preco_combustivel.xlsx')
df <- readxl::read_excel('inputs\\preco_combustivel.xlsx')
# Produzindo o gráfico com uma versão interativa com plotly
ggplotly(
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
linetype = Tipo),
linewidth = 1.45 ) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
alpha = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))) %>%
layout(
title = list(text = paste0(
'<b>Preços dos Combustíveis Médio e Ajustados pela Inflação</b><br>',
'<span style="font-size:14px;">Mai 2004 a Mar 2024</span>' ),
x = 0.5,
xanchor = "center",
y = 0.99,
yanchor = "top"),
legend = list(orientation = "h",
x = 0.5,
y = 1.035,
xanchor = "center",
yanchor = "top"),
margin = list(t = 100))
# Limpeza dos dados e formatação de data
df <- df %>%
# Remover valores ausentes
dplyr::filter(!is.na(mes)) %>%
# Formatando o campo data
dplyr::mutate(date = as.Date(paste(ano, mes, "01", sep = "-"))) %>%
# Selecionando as colunas importantes
dplyr::select(date, produto, preco_corrigido, preco_medio) %>%
# Renomeando para padronizar
dplyr::rename('Data' = date,
'Produto' = produto,
'Corrigido' = preco_corrigido,
'Medio' = preco_medio) %>%
# Ordenar os dados por ano e mês
dplyr::arrange(Produto, Data) %>%
tidyr::pivot_longer(cols = c(Corrigido, Medio),
values_to = 'Preco',
names_to = 'Tipo') %>%
# Retirar o Diesel S50 e Diesel S10
dplyr::filter(!(Produto %in% c('Diesel S50', 'Diesel S10')))
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
linetype = Tipo),
linewidth = 1.45 ) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
alpha = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
linetype = Tipo),
linewidth = 1.45 ) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
#linetype = Tipo)
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
#linetype = Tipo
)
linewidth = 1.45 ) +
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
#linetype = Tipo
),
linewidth = 1.45 ) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
linetype = Tipo
),
linewidth = 1.45 ) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
linetype = Tipo
),
#linewidth = 1.45
) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
#color = Tipo,
group = Produto,
linetype = Tipo
),
linewidth = 1.45) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
ggplot(df) +
# Gráfico de Linha
geom_line(
aes(x = Data,
y = Preco,
color = Tipo,
group = Produto,
#linetype = Tipo
),
linewidth = 1.45 ) +
labs(title = "Preços dos Combustíveis Médio e Ajustados pela Inflação",
subtitle = 'Mai 2004 a Mar 2024',
x = element_blank(),
y = element_blank(),
color = "Combustível",
linetype = "Combustível",
caption = 'Fonte: Base dos Dados / ANP / IBGE') +
# Ajustar o eixo x do gráfico para que fique mais visível
scale_x_date(date_breaks = '2.5 year', date_labels = '%y/%b') +
# Ajustar o eixo y para unidade real
scale_y_continuous(labels = scales::dollar_format(prefix = "R$")) +
# Criar subplot por tipo de combustível
facet_wrap(~ Produto, scales = 'free', ncol = 2) +
# Ajustes no tema
theme_minimal() +
theme(# Ajuste da legenda
legend.position = 'top',
# Ajuste dos eixos
axis.title = element_text(size = 14),
axis.text = element_text(size = 10),
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1))
